#!/usr/bin/env bash

source bash_utils
source bash_mysql

source bash_common

check_prerequisites()
{
    if ! mysql -e "SELECT make_randstr(20)" >/dev/null 2>/dev/null; then
        cecho "make_randstr project (github.com/cjungmann/make_randstr.git) missing." red
        exit 1
    fi
}

transform_and_install_default_xsl()
{
    # version should be 'debug' or 'release', and the value determines if
    # the stylesheet imports from debug.xsl or compiled.xsl (for 'release').
    local version="${1:-debug}"
    local source=/usr/local/lib/schemafw/default.xsl

    # Transform default.xsl and write result to site/default.xsl:
    local -a xslargs=(
        --stringparam version "${version}"
        setup_default.xsl
        "$source"
    )

    xsltproc "${xslargs[@]}" > site/default.xsl
    if [ $? -eq 0 ]; then
        cecho "Transformed '${source}' to site/default.xsl"
    else
        cecho "Transformation of '${source}' FAILED" red
    fi
}

create_directories()
{
    if ! [ -d "site" ]; then
        cecho "Creating directory 'site'"
        mkdir site
        ln -s /usr/local/lib/schemafw/web_includes site/includes
    fi
}

create_database()
{
    cecho "Creating database $DBase"
    mysql -e "CREATE DATABASE ${DBase}"
    mysql -f "$DBase" < /usr/local/lib/SchemaServer/install/sys_procs.sql
    if [ "$?" -ne 0 ]; then
        cecho "Terminating script due to error in sys_procs.sql." red
        exit 1
    fi
}

create_srm_top_material()
{
    local target="$1"
    local default_mode="$2"

    echo "\$database       : $DBase"          > "$target"
    echo "\$xml-stylesheet : default.xsl"     >> "$target"
    echo "\$default-mode   : ${default_mode}" >> "$target"
    echo >> "$target"
    echo "\$session-type        : identity"            >> "$target"
    echo "\$test-authorized     : App_Session_Confirm" >> "$target"
    echo "\$jump-not-authorized : Login.srm"           >> "$target"
    echo >> "$target"
}

load_tables()
{
    cecho "Creating tables in $DBase"
    mysql "${DBase}" < setup_files/tables.sql
    if [ "$?" -ne 0 ]; then
        cecho "Terminating script due to mysql error." red
        exit 1
    fi
}

generate_session_procs()
{
    cecho "Generating 0_session_procs.sql"
    gensfw_session_procs "${DBase}" Session_Info > setup_files/0_session_procs.sql
}

add_login_srm_buttons()
{
    local target="$1"

    local -a session_types=(
        first_child login
        "session-type : establish"
        --
        
        first_child login_submit
        "session-type : establish"
        --

        first_child register
        "session-type : establish"
        --
        
        first_child register_submit
        "session-type : establish"
        --
    )


    local -a fix_login=(
        first_child login/schema
        button --

        last_child login/schema/button
        "label : Register New User"
        --
        
        last_child login/schema/button
        "type : jump"
        --

        last_child login/schema/button
        "url : ?register"
        --

    )

    local -a fix_reg=(
        first_child register/schema
        button --

        last_child register/schema/button
        "label : Login with Existing User"
        --
        
        last_child register/schema/button
        "type : jump"
        --

        last_child register/schema/button
        "url : ?login"
        --
    )

    local -a fix_submit_types=(
        set_line
           "login_submit/type"
           "<%SET_VALUE>"
           "form-jump"
           --
        
        set_line
           "register_submit/type"
           "<%SET_VALUE>"
           "form-jump"
           --
    )

    local -a set_password_types=(
        first_child
        "login/schema/field:password"
        "type : password"
        --

        first_child
        "register/schema/field:password"
        "type : password"
        --
    )

    local -a all_fixes=(
        "${session_types[@]}"
        "${fix_reg[@]}"
        "${fix_login[@]}"
        "${fix_submit_types[@]}"
        "${set_password_types[@]}"
        write_file "$target" --
    )

    cecho "Adding buttons to login and register dialogs in $target"
    gensfw_srm "$target" "${all_fixes[@]}"
}

add_login_submit_jumps()
{
    local target="$1"

    local -a add_jumps=(
        set_line
           "login_submit/result/type"
           "<%SET_VALUE>"
           "variables"
           --

        after_sibling
           "login_submit/result/type"
           "jumps"
           --

        last_child
           "login_submit/result/jumps"
           "jump0 : profile.srm"
           --
        
        last_child
           "login_submit/result/jumps"
           "jump1 : login.srm"
           --

        set_line
           "register_submit/result/type"
           "<%SET_VALUE>"
           "variables"
           --

        copy_as_last_child
           "register_submit/result"
           "login_submit/result/jumps"
           --

        write_file "$target" --
    )

    cecho "Adding jumps to submit modes in '$target.'"
    gensfw_srm "$target" "${add_jumps[@]}"
}

create_login_srm_file()
{
    cecho "Generating srm scripts."
    if ! proc_exists "$DBase" "App_User_Login"; then
        cecho "Procedure App_User_Login is missing, terminating script." red
        exit 1
    else
        declare target="site/login.srm"

        create_srm_top_material "$target" "login"

        gensfw_srm_from_proc "$DBase" "App_User_Login" "login"       >> "$target"
        gensfw_srm_from_proc "$DBase" "App_User_Register" "register" >> "$target"

        cecho "Generated $target"

        add_login_srm_buttons "$target"
        add_login_submit_jumps "$target"
    fi
}

tweak_profile_srm()
{
    local target="$1"

    local -a add_procedure=(
        set_line
           "profile/type"
           "<%SET_VALUE>"
           "form-edit"
           --

        after_sibling
           "profile/schema-proc"
           "procedure : App_User_Profile_Read"
           --

        after_sibling
           "profile/form-action"
           "title : Edit {@handle} Profile"
           --

        first_child
           "profile/schema"
           "intro : Enter the correct password to make changes."
           --

        first_child
           "profile/schema/field:id"
           "hidden : true"
           --
         
        first_child
           "profile/schema/field:email"
           "hidden : true"
           --

        first_child
           "profile/schema/field:handle"
           "hidden : true"
           --

        first_child
           "profile/schema/field:pword"
           "type : password"
           --

        set_line
           "profile_submit/type"
           "<%SET_VALUE>"
           "form-jump"
           --

        set_line
           "profile_submit/result/type"
           "<%SET_VALUE>"
           "variables"
           --

        last_child
           "profile_submit/result"
           "jumps"
           --

        last_child
           "profile_submit/result/jumps"
           "jump0 : ?profile"
           --

        last_child
           "profile_submit/result/jumps"
           "jump1 : ?profile"
           --

        write_file "$target" --
    )

    gensfw_srm "$target" "${add_procedure[@]}"
}

create_profile_srm_file()
{
    cecho "Generating profile.srm"
    if ! proc_exists "$DBase" "App_User_Profile_Read"; then
        cecho "Procedure App_User_Profile_Read is missing. Terminating script." red
        exit 1
    else
        declare target="site/profile.srm"

        create_srm_top_material "$target" "profile"

        gensfw_srm_from_proc "$DBase" "App_User_Profile_Update" "profile" >> "$target"

        tweak_profile_srm "$target"
    fi
}

decimate()
{
    mysql -e "DROP DATABASE ${DBase}"
    rm setup_files/0_session_procs.sql
    rm -r site
}


check_prerequisites

if ! database_exists "${DBase}"; then
    create_database
fi


if [ "$1" = 'uninstall' ]; then
    decimate
else
    create_directories
    transform_and_install_default_xsl production
    load_tables
    generate_session_procs
    ./setup_procs_only
    create_login_srm_file
    create_profile_srm_file
    
fi

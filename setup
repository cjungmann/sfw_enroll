#!/usr/bin/env bash

source bash_utils
source bash_mysql

source bash_common

source setup_srm_tweaks

check_prerequisites()
{
    if ! mysql -e "SELECT make_randstr(20)" >/dev/null 2>/dev/null; then
        cecho "make_randstr project (github.com/cjungmann/make_randstr.git) missing." red
        exit 1
    fi
}

transform_and_install_default_xsl()
{
    # version should be 'debug' or 'release', and the value determines if
    # the stylesheet imports from debug.xsl or compiled.xsl (for 'release').
    local version="${1:-debug}"
    local source=/usr/local/lib/schemafw/default.xsl

    # Transform default.xsl and write result to site/default.xsl:
    local -a xslargs=(
        --stringparam version "${version}"
        setup_default.xsl
        "$source"
    )

    xsltproc "${xslargs[@]}" > site/default.xsl
    if [ $? -eq 0 ]; then
        cecho "Transformed '${source}' to site/default.xsl"
    else
        cecho "Transformation of '${source}' FAILED" red
    fi
}

create_directories()
{
    if ! [ -d "site" ]; then
        cecho "Creating directory 'site'"
        mkdir site
        ln -s /usr/local/lib/schemafw/web_includes site/includes
    fi
}

create_database()
{
    cecho "Creating database $DBase"
    mysql -e "CREATE DATABASE ${DBase}"
    mysql -f "$DBase" < /usr/local/lib/SchemaServer/install/sys_procs.sql
    if [ "$?" -ne 0 ]; then
        cecho "Terminating script due to error in sys_procs.sql." red
        exit 1
    fi
}

create_srm_top_material()
{
    local target="$1"
    local default_mode="$2"

    echo "\$database       : $DBase"          > "$target"
    echo "\$xml-stylesheet : default.xsl"     >> "$target"
    echo "\$default-mode   : ${default_mode}" >> "$target"
    echo >> "$target"
}

add_srm_session_top_material()
{
    local target="$1"
    echo "\$session-type        : identity"            >> "$target"
    echo "\$test_authorized     : App_Session_Confirm" >> "$target"
    echo "\$jump-not-authorized : Login.srm"           >> "$target"
    echo >> "$target"
}

load_tables()
{
    cecho "Creating tables in $DBase"
    mysql "${DBase}" < setup_files/tables.sql
    if [ "$?" -ne 0 ]; then
        cecho "Terminating script due to mysql error." red
        exit 1
    fi
}

generate_session_procs()
{
    cecho "Generating 0_session_procs.sql"
    gensfw_session_procs "${DBase}" Session_Info > setup_files/0_session_procs.sql
}

create_login_srm_file()
{
    terminate_on_missing_proc "$DBase" App_User_Login

    local target="site/login.srm"

    create_srm_top_material "$target" "login"
    echo "\$session-type : establish" >> "$target"
    echo >> "$target"

    gensfw_srm_from_proc "$DBase" "App_User_Login" "login"              >> "$target"
    gensfw_srm_from_proc "$DBase" "App_User_Register" "register"        >> "$target"
    gensfw_srm_from_proc "$DBase" "App_User_Password_Recover" "recover" >> "$target"

    cecho "Generated $target"
}

create_home_srm_file()
{
    local procname="App_Home_Page"
    terminate_on_missing_proc "$DBase" "$procname"

    local target="site/home.srm"

    create_srm_top_material "$target" "home"
    add_srm_session_top_material "$target"

    local -a lines=(
        "home"
        "   procedure : ${procname}"
        "   type : form-page"
        "   schema"
        "   button"
        "      label : Profile"
        "      type : open"
        "      url : profile.srm"
        "   button"
        "      label : Logout"
        "      type : jump"
        "      url : login.srm?logout"
        )

    local IFS=$'\n'
    echo "${lines[*]}" >> "$target"

    cecho "Generated $target"
}

create_profile_srm_file()
{
    cecho "Generating profile.srm"

    terminate_on_missing_proc "$DBase" App_User_Profile_Read

    local target="site/profile.srm"

    create_srm_top_material "$target" "profile"
    add_srm_session_top_material "$target"
    gensfw_srm_from_proc "$DBase" "App_User_Profile_Update" "profile"   >> "$target"
    gensfw_srm_from_proc "$DBase" "App_User_Change_Password" "password" >> "$target"

    cecho "Generated $target"
}

decimate()
{
    mysql -e "DROP DATABASE ${DBase}"
    rm setup_files/0_session_procs.sql
    rm -r site
}


check_prerequisites

if ! database_exists "${DBase}"; then
    create_database
fi


if [ "$1" = 'uninstall' ]; then
    decimate
else
    declare version="${1:-debug}"

    cecho "Preparing website in the '${version}' version." blue

    create_directories
    transform_and_install_default_xsl "$version"
    load_tables
    generate_session_procs
    ./setup_procs_only
    create_login_srm_file
    create_home_srm_file
    create_profile_srm_file
    tweak_srms
fi
